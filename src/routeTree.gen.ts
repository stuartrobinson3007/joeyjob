/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as Oauth2AccessCodeRouteImport } from './routes/oauth2/accessCode'
import { Route as InviteInvitationIdRouteImport } from './routes/invite.$invitationId'
import { Route as EmbedFormIdRouteImport } from './routes/embed.$formId'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthenticatedSuperadminRouteImport } from './routes/_authenticated/superadmin'
import { Route as AuthenticatedSelectOrganizationRouteImport } from './routes/_authenticated/select-organization'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedOnboardingRouteImport } from './routes/_authenticated/onboarding'
import { Route as AuthenticatedOrgRequiredRouteImport } from './routes/_authenticated/_org-required'
import { Route as AuthenticatedSuperadminIndexRouteImport } from './routes/_authenticated/superadmin/index'
import { Route as AuthenticatedOrgRequiredIndexRouteImport } from './routes/_authenticated/_org-required/index'
import { Route as FOrgSlugFormSlugRouteImport } from './routes/f.$orgSlug.$formSlug'
import { Route as AuthenticatedSuperadminWorkspacesRouteImport } from './routes/_authenticated/superadmin/workspaces'
import { Route as AuthenticatedSuperadminUsersRouteImport } from './routes/_authenticated/superadmin/users'
import { Route as AuthenticatedOnboardingCompanySyncRouteImport } from './routes/_authenticated/onboarding/company-sync'
import { Route as AuthenticatedOrgRequiredTeamRouteImport } from './routes/_authenticated/_org-required/team'
import { Route as AuthenticatedOrgRequiredSettingsRouteImport } from './routes/_authenticated/_org-required/settings'
import { Route as AuthenticatedOrgRequiredPaymentErrorRouteImport } from './routes/_authenticated/_org-required/payment-error'
import { Route as AuthenticatedOrgRequiredFormsRouteImport } from './routes/_authenticated/_org-required/forms'
import { Route as AuthenticatedOrgRequiredChoosePlanRouteImport } from './routes/_authenticated/_org-required/choose-plan'
import { Route as AuthenticatedOrgRequiredBillingRouteImport } from './routes/_authenticated/_org-required/billing'
import { Route as AuthenticatedOrgRequiredTodosIdEditRouteImport } from './routes/_authenticated/_org-required/todos.$id.edit'
import { Route as AuthenticatedOrgRequiredFormFormIdEditRouteImport } from './routes/_authenticated/_org-required/form.$formId.edit'
import { ServerRoute as ApiHealthServerRouteImport } from './routes/api/health'
import { ServerRoute as ApiEmployeesIndexServerRouteImport } from './routes/api/employees/index'
import { ServerRoute as ApiStripeWebhookServerRouteImport } from './routes/api/stripe/webhook'
import { ServerRoute as ApiEmployeesSyncServerRouteImport } from './routes/api/employees/sync'
import { ServerRoute as ApiDebugSimproEmployeesServerRouteImport } from './routes/api/debug/simpro-employees'
import { ServerRoute as ApiDebugServiceEmployeesServerRouteImport } from './routes/api/debug/service-employees'
import { ServerRoute as ApiBookingsSubmitServerRouteImport } from './routes/api/bookings/submit'
import { ServerRoute as ApiAvatarsUploadServerRouteImport } from './routes/api/avatars/upload'
import { ServerRoute as ApiAvatarsDeleteServerRouteImport } from './routes/api/avatars/delete'
import { ServerRoute as ApiAvatarsSplatServerRouteImport } from './routes/api/avatars/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'
import { ServerRoute as ApiServicesServiceIdEmployeesServerRouteImport } from './routes/api/services/$serviceId/employees'
import { ServerRoute as ApiPublicServicesServiceIdAvailabilityServerRouteImport } from './routes/api/public/services/$serviceId/availability'

const rootServerRouteImport = createServerRootRoute()

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const Oauth2AccessCodeRoute = Oauth2AccessCodeRouteImport.update({
  id: '/oauth2/accessCode',
  path: '/oauth2/accessCode',
  getParentRoute: () => rootRouteImport,
} as any)
const InviteInvitationIdRoute = InviteInvitationIdRouteImport.update({
  id: '/invite/$invitationId',
  path: '/invite/$invitationId',
  getParentRoute: () => rootRouteImport,
} as any)
const EmbedFormIdRoute = EmbedFormIdRouteImport.update({
  id: '/embed/$formId',
  path: '/embed/$formId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSuperadminRoute = AuthenticatedSuperadminRouteImport.update({
  id: '/superadmin',
  path: '/superadmin',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSelectOrganizationRoute =
  AuthenticatedSelectOrganizationRouteImport.update({
    id: '/select-organization',
    path: '/select-organization',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedOnboardingRoute = AuthenticatedOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedOrgRequiredRoute =
  AuthenticatedOrgRequiredRouteImport.update({
    id: '/_org-required',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSuperadminIndexRoute =
  AuthenticatedSuperadminIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSuperadminRoute,
  } as any)
const AuthenticatedOrgRequiredIndexRoute =
  AuthenticatedOrgRequiredIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const FOrgSlugFormSlugRoute = FOrgSlugFormSlugRouteImport.update({
  id: '/f/$orgSlug/$formSlug',
  path: '/f/$orgSlug/$formSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSuperadminWorkspacesRoute =
  AuthenticatedSuperadminWorkspacesRouteImport.update({
    id: '/workspaces',
    path: '/workspaces',
    getParentRoute: () => AuthenticatedSuperadminRoute,
  } as any)
const AuthenticatedSuperadminUsersRoute =
  AuthenticatedSuperadminUsersRouteImport.update({
    id: '/users',
    path: '/users',
    getParentRoute: () => AuthenticatedSuperadminRoute,
  } as any)
const AuthenticatedOnboardingCompanySyncRoute =
  AuthenticatedOnboardingCompanySyncRouteImport.update({
    id: '/company-sync',
    path: '/company-sync',
    getParentRoute: () => AuthenticatedOnboardingRoute,
  } as any)
const AuthenticatedOrgRequiredTeamRoute =
  AuthenticatedOrgRequiredTeamRouteImport.update({
    id: '/team',
    path: '/team',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredSettingsRoute =
  AuthenticatedOrgRequiredSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredPaymentErrorRoute =
  AuthenticatedOrgRequiredPaymentErrorRouteImport.update({
    id: '/payment-error',
    path: '/payment-error',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredFormsRoute =
  AuthenticatedOrgRequiredFormsRouteImport.update({
    id: '/forms',
    path: '/forms',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredChoosePlanRoute =
  AuthenticatedOrgRequiredChoosePlanRouteImport.update({
    id: '/choose-plan',
    path: '/choose-plan',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredBillingRoute =
  AuthenticatedOrgRequiredBillingRouteImport.update({
    id: '/billing',
    path: '/billing',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredTodosIdEditRoute =
  AuthenticatedOrgRequiredTodosIdEditRouteImport.update({
    id: '/todos/$id/edit',
    path: '/todos/$id/edit',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const AuthenticatedOrgRequiredFormFormIdEditRoute =
  AuthenticatedOrgRequiredFormFormIdEditRouteImport.update({
    id: '/form/$formId/edit',
    path: '/form/$formId/edit',
    getParentRoute: () => AuthenticatedOrgRequiredRoute,
  } as any)
const ApiHealthServerRoute = ApiHealthServerRouteImport.update({
  id: '/api/health',
  path: '/api/health',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmployeesIndexServerRoute = ApiEmployeesIndexServerRouteImport.update({
  id: '/api/employees/',
  path: '/api/employees/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiStripeWebhookServerRoute = ApiStripeWebhookServerRouteImport.update({
  id: '/api/stripe/webhook',
  path: '/api/stripe/webhook',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiEmployeesSyncServerRoute = ApiEmployeesSyncServerRouteImport.update({
  id: '/api/employees/sync',
  path: '/api/employees/sync',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiDebugSimproEmployeesServerRoute =
  ApiDebugSimproEmployeesServerRouteImport.update({
    id: '/api/debug/simpro-employees',
    path: '/api/debug/simpro-employees',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiDebugServiceEmployeesServerRoute =
  ApiDebugServiceEmployeesServerRouteImport.update({
    id: '/api/debug/service-employees',
    path: '/api/debug/service-employees',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiBookingsSubmitServerRoute = ApiBookingsSubmitServerRouteImport.update({
  id: '/api/bookings/submit',
  path: '/api/bookings/submit',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAvatarsUploadServerRoute = ApiAvatarsUploadServerRouteImport.update({
  id: '/api/avatars/upload',
  path: '/api/avatars/upload',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAvatarsDeleteServerRoute = ApiAvatarsDeleteServerRouteImport.update({
  id: '/api/avatars/delete',
  path: '/api/avatars/delete',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAvatarsSplatServerRoute = ApiAvatarsSplatServerRouteImport.update({
  id: '/api/avatars/$',
  path: '/api/avatars/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiServicesServiceIdEmployeesServerRoute =
  ApiServicesServiceIdEmployeesServerRouteImport.update({
    id: '/api/services/$serviceId/employees',
    path: '/api/services/$serviceId/employees',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiPublicServicesServiceIdAvailabilityServerRoute =
  ApiPublicServicesServiceIdAvailabilityServerRouteImport.update({
    id: '/api/public/services/$serviceId/availability',
    path: '/api/public/services/$serviceId/availability',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/onboarding': typeof AuthenticatedOnboardingRouteWithChildren
  '/profile': typeof AuthenticatedProfileRoute
  '/select-organization': typeof AuthenticatedSelectOrganizationRoute
  '/superadmin': typeof AuthenticatedSuperadminRouteWithChildren
  '/auth/signin': typeof AuthSigninRoute
  '/embed/$formId': typeof EmbedFormIdRoute
  '/invite/$invitationId': typeof InviteInvitationIdRoute
  '/oauth2/accessCode': typeof Oauth2AccessCodeRoute
  '/billing': typeof AuthenticatedOrgRequiredBillingRoute
  '/choose-plan': typeof AuthenticatedOrgRequiredChoosePlanRoute
  '/forms': typeof AuthenticatedOrgRequiredFormsRoute
  '/payment-error': typeof AuthenticatedOrgRequiredPaymentErrorRoute
  '/settings': typeof AuthenticatedOrgRequiredSettingsRoute
  '/team': typeof AuthenticatedOrgRequiredTeamRoute
  '/onboarding/company-sync': typeof AuthenticatedOnboardingCompanySyncRoute
  '/superadmin/users': typeof AuthenticatedSuperadminUsersRoute
  '/superadmin/workspaces': typeof AuthenticatedSuperadminWorkspacesRoute
  '/f/$orgSlug/$formSlug': typeof FOrgSlugFormSlugRoute
  '/': typeof AuthenticatedOrgRequiredIndexRoute
  '/superadmin/': typeof AuthenticatedSuperadminIndexRoute
  '/form/$formId/edit': typeof AuthenticatedOrgRequiredFormFormIdEditRoute
  '/todos/$id/edit': typeof AuthenticatedOrgRequiredTodosIdEditRoute
}
export interface FileRoutesByTo {
  '/onboarding': typeof AuthenticatedOnboardingRouteWithChildren
  '/profile': typeof AuthenticatedProfileRoute
  '/select-organization': typeof AuthenticatedSelectOrganizationRoute
  '/auth/signin': typeof AuthSigninRoute
  '/embed/$formId': typeof EmbedFormIdRoute
  '/invite/$invitationId': typeof InviteInvitationIdRoute
  '/oauth2/accessCode': typeof Oauth2AccessCodeRoute
  '/billing': typeof AuthenticatedOrgRequiredBillingRoute
  '/choose-plan': typeof AuthenticatedOrgRequiredChoosePlanRoute
  '/forms': typeof AuthenticatedOrgRequiredFormsRoute
  '/payment-error': typeof AuthenticatedOrgRequiredPaymentErrorRoute
  '/settings': typeof AuthenticatedOrgRequiredSettingsRoute
  '/team': typeof AuthenticatedOrgRequiredTeamRoute
  '/onboarding/company-sync': typeof AuthenticatedOnboardingCompanySyncRoute
  '/superadmin/users': typeof AuthenticatedSuperadminUsersRoute
  '/superadmin/workspaces': typeof AuthenticatedSuperadminWorkspacesRoute
  '/f/$orgSlug/$formSlug': typeof FOrgSlugFormSlugRoute
  '/': typeof AuthenticatedOrgRequiredIndexRoute
  '/superadmin': typeof AuthenticatedSuperadminIndexRoute
  '/form/$formId/edit': typeof AuthenticatedOrgRequiredFormFormIdEditRoute
  '/todos/$id/edit': typeof AuthenticatedOrgRequiredTodosIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/_org-required': typeof AuthenticatedOrgRequiredRouteWithChildren
  '/_authenticated/onboarding': typeof AuthenticatedOnboardingRouteWithChildren
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/select-organization': typeof AuthenticatedSelectOrganizationRoute
  '/_authenticated/superadmin': typeof AuthenticatedSuperadminRouteWithChildren
  '/auth/signin': typeof AuthSigninRoute
  '/embed/$formId': typeof EmbedFormIdRoute
  '/invite/$invitationId': typeof InviteInvitationIdRoute
  '/oauth2/accessCode': typeof Oauth2AccessCodeRoute
  '/_authenticated/_org-required/billing': typeof AuthenticatedOrgRequiredBillingRoute
  '/_authenticated/_org-required/choose-plan': typeof AuthenticatedOrgRequiredChoosePlanRoute
  '/_authenticated/_org-required/forms': typeof AuthenticatedOrgRequiredFormsRoute
  '/_authenticated/_org-required/payment-error': typeof AuthenticatedOrgRequiredPaymentErrorRoute
  '/_authenticated/_org-required/settings': typeof AuthenticatedOrgRequiredSettingsRoute
  '/_authenticated/_org-required/team': typeof AuthenticatedOrgRequiredTeamRoute
  '/_authenticated/onboarding/company-sync': typeof AuthenticatedOnboardingCompanySyncRoute
  '/_authenticated/superadmin/users': typeof AuthenticatedSuperadminUsersRoute
  '/_authenticated/superadmin/workspaces': typeof AuthenticatedSuperadminWorkspacesRoute
  '/f/$orgSlug/$formSlug': typeof FOrgSlugFormSlugRoute
  '/_authenticated/_org-required/': typeof AuthenticatedOrgRequiredIndexRoute
  '/_authenticated/superadmin/': typeof AuthenticatedSuperadminIndexRoute
  '/_authenticated/_org-required/form/$formId/edit': typeof AuthenticatedOrgRequiredFormFormIdEditRoute
  '/_authenticated/_org-required/todos/$id/edit': typeof AuthenticatedOrgRequiredTodosIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/onboarding'
    | '/profile'
    | '/select-organization'
    | '/superadmin'
    | '/auth/signin'
    | '/embed/$formId'
    | '/invite/$invitationId'
    | '/oauth2/accessCode'
    | '/billing'
    | '/choose-plan'
    | '/forms'
    | '/payment-error'
    | '/settings'
    | '/team'
    | '/onboarding/company-sync'
    | '/superadmin/users'
    | '/superadmin/workspaces'
    | '/f/$orgSlug/$formSlug'
    | '/'
    | '/superadmin/'
    | '/form/$formId/edit'
    | '/todos/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/onboarding'
    | '/profile'
    | '/select-organization'
    | '/auth/signin'
    | '/embed/$formId'
    | '/invite/$invitationId'
    | '/oauth2/accessCode'
    | '/billing'
    | '/choose-plan'
    | '/forms'
    | '/payment-error'
    | '/settings'
    | '/team'
    | '/onboarding/company-sync'
    | '/superadmin/users'
    | '/superadmin/workspaces'
    | '/f/$orgSlug/$formSlug'
    | '/'
    | '/superadmin'
    | '/form/$formId/edit'
    | '/todos/$id/edit'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_authenticated/_org-required'
    | '/_authenticated/onboarding'
    | '/_authenticated/profile'
    | '/_authenticated/select-organization'
    | '/_authenticated/superadmin'
    | '/auth/signin'
    | '/embed/$formId'
    | '/invite/$invitationId'
    | '/oauth2/accessCode'
    | '/_authenticated/_org-required/billing'
    | '/_authenticated/_org-required/choose-plan'
    | '/_authenticated/_org-required/forms'
    | '/_authenticated/_org-required/payment-error'
    | '/_authenticated/_org-required/settings'
    | '/_authenticated/_org-required/team'
    | '/_authenticated/onboarding/company-sync'
    | '/_authenticated/superadmin/users'
    | '/_authenticated/superadmin/workspaces'
    | '/f/$orgSlug/$formSlug'
    | '/_authenticated/_org-required/'
    | '/_authenticated/superadmin/'
    | '/_authenticated/_org-required/form/$formId/edit'
    | '/_authenticated/_org-required/todos/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthSigninRoute: typeof AuthSigninRoute
  EmbedFormIdRoute: typeof EmbedFormIdRoute
  InviteInvitationIdRoute: typeof InviteInvitationIdRoute
  Oauth2AccessCodeRoute: typeof Oauth2AccessCodeRoute
  FOrgSlugFormSlugRoute: typeof FOrgSlugFormSlugRoute
}
export interface FileServerRoutesByFullPath {
  '/api/health': typeof ApiHealthServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/avatars/$': typeof ApiAvatarsSplatServerRoute
  '/api/avatars/delete': typeof ApiAvatarsDeleteServerRoute
  '/api/avatars/upload': typeof ApiAvatarsUploadServerRoute
  '/api/bookings/submit': typeof ApiBookingsSubmitServerRoute
  '/api/debug/service-employees': typeof ApiDebugServiceEmployeesServerRoute
  '/api/debug/simpro-employees': typeof ApiDebugSimproEmployeesServerRoute
  '/api/employees/sync': typeof ApiEmployeesSyncServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
  '/api/employees': typeof ApiEmployeesIndexServerRoute
  '/api/services/$serviceId/employees': typeof ApiServicesServiceIdEmployeesServerRoute
  '/api/public/services/$serviceId/availability': typeof ApiPublicServicesServiceIdAvailabilityServerRoute
}
export interface FileServerRoutesByTo {
  '/api/health': typeof ApiHealthServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/avatars/$': typeof ApiAvatarsSplatServerRoute
  '/api/avatars/delete': typeof ApiAvatarsDeleteServerRoute
  '/api/avatars/upload': typeof ApiAvatarsUploadServerRoute
  '/api/bookings/submit': typeof ApiBookingsSubmitServerRoute
  '/api/debug/service-employees': typeof ApiDebugServiceEmployeesServerRoute
  '/api/debug/simpro-employees': typeof ApiDebugSimproEmployeesServerRoute
  '/api/employees/sync': typeof ApiEmployeesSyncServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
  '/api/employees': typeof ApiEmployeesIndexServerRoute
  '/api/services/$serviceId/employees': typeof ApiServicesServiceIdEmployeesServerRoute
  '/api/public/services/$serviceId/availability': typeof ApiPublicServicesServiceIdAvailabilityServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/health': typeof ApiHealthServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/avatars/$': typeof ApiAvatarsSplatServerRoute
  '/api/avatars/delete': typeof ApiAvatarsDeleteServerRoute
  '/api/avatars/upload': typeof ApiAvatarsUploadServerRoute
  '/api/bookings/submit': typeof ApiBookingsSubmitServerRoute
  '/api/debug/service-employees': typeof ApiDebugServiceEmployeesServerRoute
  '/api/debug/simpro-employees': typeof ApiDebugSimproEmployeesServerRoute
  '/api/employees/sync': typeof ApiEmployeesSyncServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
  '/api/employees/': typeof ApiEmployeesIndexServerRoute
  '/api/services/$serviceId/employees': typeof ApiServicesServiceIdEmployeesServerRoute
  '/api/public/services/$serviceId/availability': typeof ApiPublicServicesServiceIdAvailabilityServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/health'
    | '/api/auth/$'
    | '/api/avatars/$'
    | '/api/avatars/delete'
    | '/api/avatars/upload'
    | '/api/bookings/submit'
    | '/api/debug/service-employees'
    | '/api/debug/simpro-employees'
    | '/api/employees/sync'
    | '/api/stripe/webhook'
    | '/api/employees'
    | '/api/services/$serviceId/employees'
    | '/api/public/services/$serviceId/availability'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/health'
    | '/api/auth/$'
    | '/api/avatars/$'
    | '/api/avatars/delete'
    | '/api/avatars/upload'
    | '/api/bookings/submit'
    | '/api/debug/service-employees'
    | '/api/debug/simpro-employees'
    | '/api/employees/sync'
    | '/api/stripe/webhook'
    | '/api/employees'
    | '/api/services/$serviceId/employees'
    | '/api/public/services/$serviceId/availability'
  id:
    | '__root__'
    | '/api/health'
    | '/api/auth/$'
    | '/api/avatars/$'
    | '/api/avatars/delete'
    | '/api/avatars/upload'
    | '/api/bookings/submit'
    | '/api/debug/service-employees'
    | '/api/debug/simpro-employees'
    | '/api/employees/sync'
    | '/api/stripe/webhook'
    | '/api/employees/'
    | '/api/services/$serviceId/employees'
    | '/api/public/services/$serviceId/availability'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiHealthServerRoute: typeof ApiHealthServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiAvatarsSplatServerRoute: typeof ApiAvatarsSplatServerRoute
  ApiAvatarsDeleteServerRoute: typeof ApiAvatarsDeleteServerRoute
  ApiAvatarsUploadServerRoute: typeof ApiAvatarsUploadServerRoute
  ApiBookingsSubmitServerRoute: typeof ApiBookingsSubmitServerRoute
  ApiDebugServiceEmployeesServerRoute: typeof ApiDebugServiceEmployeesServerRoute
  ApiDebugSimproEmployeesServerRoute: typeof ApiDebugSimproEmployeesServerRoute
  ApiEmployeesSyncServerRoute: typeof ApiEmployeesSyncServerRoute
  ApiStripeWebhookServerRoute: typeof ApiStripeWebhookServerRoute
  ApiEmployeesIndexServerRoute: typeof ApiEmployeesIndexServerRoute
  ApiServicesServiceIdEmployeesServerRoute: typeof ApiServicesServiceIdEmployeesServerRoute
  ApiPublicServicesServiceIdAvailabilityServerRoute: typeof ApiPublicServicesServiceIdAvailabilityServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth2/accessCode': {
      id: '/oauth2/accessCode'
      path: '/oauth2/accessCode'
      fullPath: '/oauth2/accessCode'
      preLoaderRoute: typeof Oauth2AccessCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invite/$invitationId': {
      id: '/invite/$invitationId'
      path: '/invite/$invitationId'
      fullPath: '/invite/$invitationId'
      preLoaderRoute: typeof InviteInvitationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/embed/$formId': {
      id: '/embed/$formId'
      path: '/embed/$formId'
      fullPath: '/embed/$formId'
      preLoaderRoute: typeof EmbedFormIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/superadmin': {
      id: '/_authenticated/superadmin'
      path: '/superadmin'
      fullPath: '/superadmin'
      preLoaderRoute: typeof AuthenticatedSuperadminRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/select-organization': {
      id: '/_authenticated/select-organization'
      path: '/select-organization'
      fullPath: '/select-organization'
      preLoaderRoute: typeof AuthenticatedSelectOrganizationRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/onboarding': {
      id: '/_authenticated/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof AuthenticatedOnboardingRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_org-required': {
      id: '/_authenticated/_org-required'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedOrgRequiredRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/superadmin/': {
      id: '/_authenticated/superadmin/'
      path: '/'
      fullPath: '/superadmin/'
      preLoaderRoute: typeof AuthenticatedSuperadminIndexRouteImport
      parentRoute: typeof AuthenticatedSuperadminRoute
    }
    '/_authenticated/_org-required/': {
      id: '/_authenticated/_org-required/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedOrgRequiredIndexRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/f/$orgSlug/$formSlug': {
      id: '/f/$orgSlug/$formSlug'
      path: '/f/$orgSlug/$formSlug'
      fullPath: '/f/$orgSlug/$formSlug'
      preLoaderRoute: typeof FOrgSlugFormSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/superadmin/workspaces': {
      id: '/_authenticated/superadmin/workspaces'
      path: '/workspaces'
      fullPath: '/superadmin/workspaces'
      preLoaderRoute: typeof AuthenticatedSuperadminWorkspacesRouteImport
      parentRoute: typeof AuthenticatedSuperadminRoute
    }
    '/_authenticated/superadmin/users': {
      id: '/_authenticated/superadmin/users'
      path: '/users'
      fullPath: '/superadmin/users'
      preLoaderRoute: typeof AuthenticatedSuperadminUsersRouteImport
      parentRoute: typeof AuthenticatedSuperadminRoute
    }
    '/_authenticated/onboarding/company-sync': {
      id: '/_authenticated/onboarding/company-sync'
      path: '/company-sync'
      fullPath: '/onboarding/company-sync'
      preLoaderRoute: typeof AuthenticatedOnboardingCompanySyncRouteImport
      parentRoute: typeof AuthenticatedOnboardingRoute
    }
    '/_authenticated/_org-required/team': {
      id: '/_authenticated/_org-required/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof AuthenticatedOrgRequiredTeamRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/settings': {
      id: '/_authenticated/_org-required/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedOrgRequiredSettingsRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/payment-error': {
      id: '/_authenticated/_org-required/payment-error'
      path: '/payment-error'
      fullPath: '/payment-error'
      preLoaderRoute: typeof AuthenticatedOrgRequiredPaymentErrorRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/forms': {
      id: '/_authenticated/_org-required/forms'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof AuthenticatedOrgRequiredFormsRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/choose-plan': {
      id: '/_authenticated/_org-required/choose-plan'
      path: '/choose-plan'
      fullPath: '/choose-plan'
      preLoaderRoute: typeof AuthenticatedOrgRequiredChoosePlanRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/billing': {
      id: '/_authenticated/_org-required/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof AuthenticatedOrgRequiredBillingRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/todos/$id/edit': {
      id: '/_authenticated/_org-required/todos/$id/edit'
      path: '/todos/$id/edit'
      fullPath: '/todos/$id/edit'
      preLoaderRoute: typeof AuthenticatedOrgRequiredTodosIdEditRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
    '/_authenticated/_org-required/form/$formId/edit': {
      id: '/_authenticated/_org-required/form/$formId/edit'
      path: '/form/$formId/edit'
      fullPath: '/form/$formId/edit'
      preLoaderRoute: typeof AuthenticatedOrgRequiredFormFormIdEditRouteImport
      parentRoute: typeof AuthenticatedOrgRequiredRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/health': {
      id: '/api/health'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/employees/': {
      id: '/api/employees/'
      path: '/api/employees'
      fullPath: '/api/employees'
      preLoaderRoute: typeof ApiEmployeesIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/stripe/webhook': {
      id: '/api/stripe/webhook'
      path: '/api/stripe/webhook'
      fullPath: '/api/stripe/webhook'
      preLoaderRoute: typeof ApiStripeWebhookServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/employees/sync': {
      id: '/api/employees/sync'
      path: '/api/employees/sync'
      fullPath: '/api/employees/sync'
      preLoaderRoute: typeof ApiEmployeesSyncServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/debug/simpro-employees': {
      id: '/api/debug/simpro-employees'
      path: '/api/debug/simpro-employees'
      fullPath: '/api/debug/simpro-employees'
      preLoaderRoute: typeof ApiDebugSimproEmployeesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/debug/service-employees': {
      id: '/api/debug/service-employees'
      path: '/api/debug/service-employees'
      fullPath: '/api/debug/service-employees'
      preLoaderRoute: typeof ApiDebugServiceEmployeesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/bookings/submit': {
      id: '/api/bookings/submit'
      path: '/api/bookings/submit'
      fullPath: '/api/bookings/submit'
      preLoaderRoute: typeof ApiBookingsSubmitServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/avatars/upload': {
      id: '/api/avatars/upload'
      path: '/api/avatars/upload'
      fullPath: '/api/avatars/upload'
      preLoaderRoute: typeof ApiAvatarsUploadServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/avatars/delete': {
      id: '/api/avatars/delete'
      path: '/api/avatars/delete'
      fullPath: '/api/avatars/delete'
      preLoaderRoute: typeof ApiAvatarsDeleteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/avatars/$': {
      id: '/api/avatars/$'
      path: '/api/avatars/$'
      fullPath: '/api/avatars/$'
      preLoaderRoute: typeof ApiAvatarsSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/services/$serviceId/employees': {
      id: '/api/services/$serviceId/employees'
      path: '/api/services/$serviceId/employees'
      fullPath: '/api/services/$serviceId/employees'
      preLoaderRoute: typeof ApiServicesServiceIdEmployeesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/public/services/$serviceId/availability': {
      id: '/api/public/services/$serviceId/availability'
      path: '/api/public/services/$serviceId/availability'
      fullPath: '/api/public/services/$serviceId/availability'
      preLoaderRoute: typeof ApiPublicServicesServiceIdAvailabilityServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedOrgRequiredRouteChildren {
  AuthenticatedOrgRequiredBillingRoute: typeof AuthenticatedOrgRequiredBillingRoute
  AuthenticatedOrgRequiredChoosePlanRoute: typeof AuthenticatedOrgRequiredChoosePlanRoute
  AuthenticatedOrgRequiredFormsRoute: typeof AuthenticatedOrgRequiredFormsRoute
  AuthenticatedOrgRequiredPaymentErrorRoute: typeof AuthenticatedOrgRequiredPaymentErrorRoute
  AuthenticatedOrgRequiredSettingsRoute: typeof AuthenticatedOrgRequiredSettingsRoute
  AuthenticatedOrgRequiredTeamRoute: typeof AuthenticatedOrgRequiredTeamRoute
  AuthenticatedOrgRequiredIndexRoute: typeof AuthenticatedOrgRequiredIndexRoute
  AuthenticatedOrgRequiredFormFormIdEditRoute: typeof AuthenticatedOrgRequiredFormFormIdEditRoute
  AuthenticatedOrgRequiredTodosIdEditRoute: typeof AuthenticatedOrgRequiredTodosIdEditRoute
}

const AuthenticatedOrgRequiredRouteChildren: AuthenticatedOrgRequiredRouteChildren =
  {
    AuthenticatedOrgRequiredBillingRoute: AuthenticatedOrgRequiredBillingRoute,
    AuthenticatedOrgRequiredChoosePlanRoute:
      AuthenticatedOrgRequiredChoosePlanRoute,
    AuthenticatedOrgRequiredFormsRoute: AuthenticatedOrgRequiredFormsRoute,
    AuthenticatedOrgRequiredPaymentErrorRoute:
      AuthenticatedOrgRequiredPaymentErrorRoute,
    AuthenticatedOrgRequiredSettingsRoute:
      AuthenticatedOrgRequiredSettingsRoute,
    AuthenticatedOrgRequiredTeamRoute: AuthenticatedOrgRequiredTeamRoute,
    AuthenticatedOrgRequiredIndexRoute: AuthenticatedOrgRequiredIndexRoute,
    AuthenticatedOrgRequiredFormFormIdEditRoute:
      AuthenticatedOrgRequiredFormFormIdEditRoute,
    AuthenticatedOrgRequiredTodosIdEditRoute:
      AuthenticatedOrgRequiredTodosIdEditRoute,
  }

const AuthenticatedOrgRequiredRouteWithChildren =
  AuthenticatedOrgRequiredRoute._addFileChildren(
    AuthenticatedOrgRequiredRouteChildren,
  )

interface AuthenticatedOnboardingRouteChildren {
  AuthenticatedOnboardingCompanySyncRoute: typeof AuthenticatedOnboardingCompanySyncRoute
}

const AuthenticatedOnboardingRouteChildren: AuthenticatedOnboardingRouteChildren =
  {
    AuthenticatedOnboardingCompanySyncRoute:
      AuthenticatedOnboardingCompanySyncRoute,
  }

const AuthenticatedOnboardingRouteWithChildren =
  AuthenticatedOnboardingRoute._addFileChildren(
    AuthenticatedOnboardingRouteChildren,
  )

interface AuthenticatedSuperadminRouteChildren {
  AuthenticatedSuperadminUsersRoute: typeof AuthenticatedSuperadminUsersRoute
  AuthenticatedSuperadminWorkspacesRoute: typeof AuthenticatedSuperadminWorkspacesRoute
  AuthenticatedSuperadminIndexRoute: typeof AuthenticatedSuperadminIndexRoute
}

const AuthenticatedSuperadminRouteChildren: AuthenticatedSuperadminRouteChildren =
  {
    AuthenticatedSuperadminUsersRoute: AuthenticatedSuperadminUsersRoute,
    AuthenticatedSuperadminWorkspacesRoute:
      AuthenticatedSuperadminWorkspacesRoute,
    AuthenticatedSuperadminIndexRoute: AuthenticatedSuperadminIndexRoute,
  }

const AuthenticatedSuperadminRouteWithChildren =
  AuthenticatedSuperadminRoute._addFileChildren(
    AuthenticatedSuperadminRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedOrgRequiredRoute: typeof AuthenticatedOrgRequiredRouteWithChildren
  AuthenticatedOnboardingRoute: typeof AuthenticatedOnboardingRouteWithChildren
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedSelectOrganizationRoute: typeof AuthenticatedSelectOrganizationRoute
  AuthenticatedSuperadminRoute: typeof AuthenticatedSuperadminRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedOrgRequiredRoute: AuthenticatedOrgRequiredRouteWithChildren,
  AuthenticatedOnboardingRoute: AuthenticatedOnboardingRouteWithChildren,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedSelectOrganizationRoute: AuthenticatedSelectOrganizationRoute,
  AuthenticatedSuperadminRoute: AuthenticatedSuperadminRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthSigninRoute: AuthSigninRoute,
  EmbedFormIdRoute: EmbedFormIdRoute,
  InviteInvitationIdRoute: InviteInvitationIdRoute,
  Oauth2AccessCodeRoute: Oauth2AccessCodeRoute,
  FOrgSlugFormSlugRoute: FOrgSlugFormSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiHealthServerRoute: ApiHealthServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAvatarsSplatServerRoute: ApiAvatarsSplatServerRoute,
  ApiAvatarsDeleteServerRoute: ApiAvatarsDeleteServerRoute,
  ApiAvatarsUploadServerRoute: ApiAvatarsUploadServerRoute,
  ApiBookingsSubmitServerRoute: ApiBookingsSubmitServerRoute,
  ApiDebugServiceEmployeesServerRoute: ApiDebugServiceEmployeesServerRoute,
  ApiDebugSimproEmployeesServerRoute: ApiDebugSimproEmployeesServerRoute,
  ApiEmployeesSyncServerRoute: ApiEmployeesSyncServerRoute,
  ApiStripeWebhookServerRoute: ApiStripeWebhookServerRoute,
  ApiEmployeesIndexServerRoute: ApiEmployeesIndexServerRoute,
  ApiServicesServiceIdEmployeesServerRoute:
    ApiServicesServiceIdEmployeesServerRoute,
  ApiPublicServicesServiceIdAvailabilityServerRoute:
    ApiPublicServicesServiceIdAvailabilityServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
